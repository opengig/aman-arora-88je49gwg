name: Deploy site

on:
  push:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  DEPLOYING-WEBSITE:
    runs-on: ubuntu-latest
    if: contains(github.event.head_commit.message, 'DEPLOY') || github.event_name == 'workflow_dispatch'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      
      - name: Set Deployment Status to In Progress
        run: |
          curl -X PATCH "https://tools-backend.dev.opengig.work/deployment/${{ github.event.repository.name }}" \
            -H "Content-Type: application/json" \
            -d '{"status": "in_progress"}'

      - name: Configure AWS CLI
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_DEFAULT_REGION }}

      - name: Get Instance Public IP
        id: get_ip
        run: |
          INSTANCE_NAME="${{ github.event.repository.name }}"
          INSTANCE_IP=$(aws lightsail get-instance --instance-name $INSTANCE_NAME --query 'instance.publicIpAddress' --output text)
          echo "INSTANCE_IP=${INSTANCE_IP}" >> $GITHUB_ENV

      - name: SSH into Lightsail Instance and Deploy
        run: |
          # Copy the SSH key
          mkdir -p ~/.ssh
          echo "${{ secrets.DEFAULT_SSH_PRIVATE_KEY }}" > ~/.ssh/github
          chmod 400 ~/.ssh/github

          echo "INSTANCE_IP: $INSTANCE_IP"

          RESPONSE=$(curl --request POST \
          --url https://api.cloudflare.com/client/v4/zones/${{ secrets.CLOUDFLARE_ZONE_ID }}/dns_records \
          --header "Content-Type: application/json" \
          --header "Authorization: Bearer ${{ secrets.CLOUDFLARE_API_TOKEN }}" \
          --data '{
            "comment": "Domain verification record",
            "name": "'"${{ github.event.repository.name }}"'",
            "proxied": false,
            "ttl": 86400,
            "content": "'"${{ env.INSTANCE_IP }}"'",
            "type": "A"
          }')

          DNS_NAME=$(echo "$RESPONSE" | jq ".result.name")
          echo "DNS Name:- $DNS_NAME"

          # Deploying Now..!!
          ssh -o StrictHostKeyChecking=no -i ~/.ssh/github ubuntu@${{ env.INSTANCE_IP }} 'bash -s' < ./deploy.sh
          curl -X PATCH "https://tools-backend.dev.opengig.work/deployment/${{ github.event.repository.name }}" \
            -H "Content-Type: application/json" \
            -d '{"status": "success"}'
      - name: Set Deployment Status to Failed
        if: failure()
        run: |
          curl -X PATCH "https://tools-backend.dev.opengig.work/deployment/${{ github.event.repository.name }}" \
            -H "Content-Type: application/json" \
            -d '{"status": "failed"}'
