
generator client {
  provider = "prisma-client-js"
  
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
      
model User {
  id                    Int       @id @default(autoincrement())
  email                 String    @unique
  password              String?
  username              String    @unique
  name                  String?
  role                  String    @default("user")
  isVerified            Boolean   @default(false)
  verificationToken     String?
  otp                   String?
  otpExpiry             DateTime?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  semenAnalyses         SemenAnalysis[]
  habits                Habit[]
  recommendations       Recommendation[]
  reminders             Reminder[]
  bookmarks             Bookmark[]
  forumPosts            ForumPost[]
  forumThreads          ForumThread[]
  notifications         Notification[]
}

model SemenAnalysis {
  id                    Int       @id @default(autoincrement())
  volume                Float
  motility              Float
  morphology            Float
  analysisDate          DateTime  @default(now())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  userId                Int
  user                  User      @relation(fields: [userId], references: [id])
}

model Habit {
  id                    Int       @id @default(autoincrement())
  sleepPattern          String?
  diet                  String?
  lifestyleChanges      String?
  logDate               DateTime  @default(now())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  userId                Int
  user                  User      @relation(fields: [userId], references: [id])
}

model Recommendation {
  id                    Int       @id @default(autoincrement())
  insight               String
  recommendationDate    DateTime  @default(now())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  userId                Int
  user                  User      @relation(fields: [userId], references: [id])
}

model Reminder {
  id                    Int       @id @default(autoincrement())
  message               String
  reminderDate          DateTime
  frequency             String?
  type                  String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  userId                Int
  user                  User      @relation(fields: [userId], references: [id])
}

model Article {
  id                    Int       @id @default(autoincrement())
  title                 String
  content               String
  category              String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  bookmarks             Bookmark[]
}

model Bookmark {
  id                    Int       @id @default(autoincrement())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  userId                Int
  user                  User      @relation(fields: [userId], references: [id])

  articleId             Int
  article               Article   @relation(fields: [articleId], references: [id])
}

model ForumPost {
  id                    Int       @id @default(autoincrement())
  content               String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  userId                Int
  user                  User      @relation(fields: [userId], references: [id])

  threadId              Int
  thread                ForumThread @relation(fields: [threadId], references: [id])
}

model ForumThread {
  id                    Int       @id @default(autoincrement())
  title                 String
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  posts                 ForumPost[]
  userId                Int
  user                  User      @relation(fields: [userId], references: [id])
}

model Notification {
  id                    Int       @id @default(autoincrement())
  message               String
  notificationDate      DateTime  @default(now())
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  userId                Int
  user                  User      @relation(fields: [userId], references: [id])
}